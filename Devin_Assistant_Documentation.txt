
Devin: Desktop AI Assistant
===========================

Overview
--------
Devin is a voice-activated desktop assistant built with Python and PyQt5. It can execute commands such as opening websites, adjusting system settings (volume, brightness), performing media control, and engaging in light conversation. It uses speech recognition and text-to-speech to interact with users, and features a modern graphical interface.

Features
--------
- 🎤 Voice Recognition using Google Speech API  
- 🗣️ Text-to-Speech responses using `pyttsx3`  
- 🌐 Web Search, Wikipedia lookup, YouTube and Google opening  
- 📺 Media Controls (play/pause, next, previous, volume)  
- 💡 System Controls (brightness, volume control, close apps)  
- 🧠 Casual Talk & Personality Responses  
- 🧑‍💻 Modern GUI with typing animation, waveform animation, and conversation logs  
- 🛑 Hotword Activation: Listens for the word "listen" to wake from standby mode  
- 🎛️ Command Input Box for manual commands via GUI  

Technologies Used
-----------------
- Python 3
- PyQt5 – GUI
- SpeechRecognition – For capturing voice commands
- pyttsx3 – Text-to-speech engine
- Wikipedia API – For knowledge lookup
- PyAutoGUI – To simulate keyboard presses for media control
- psutil – To manage and close processes
- screen_brightness_control – To control screen brightness
- pycaw – To manage volume
- winsound – For feedback beeps

File Structure
--------------
Devin/
│
├── main.py   # Main application script (contains GUI and assistant logic)
├── icon.ico           
├── requirements.txt    # Python dependencies

How It Works
------------
Initialization
- Initializes the speech engine, sets the voice, rate, and volume.
- GUI is loaded using `DevinGUI`, and a background thread starts the voice assistant loop.

GUI (PyQt5)
- GUI includes:
  - Status label (listening/responding)
  - Animated waveform
  - Scrollable console for logging
  - Text command input box

Assistant Loop
- Greets the user depending on the time of day.
- Continuously listens for commands when in active mode.
- Falls into standby if told to "shut up" or "stop listening", and reactivates when hotword "listen" is detected.

Main Functions
--------------
- take_command(): Listens for and returns user voice input as text.
- speak(text): Converts text to speech and logs it to GUI.
- handle_command(query): Handles user queries.
- control_media(command): Handles media control via simulated keyboard events.
- set_brightness(level): Adjusts brightness using the screen_brightness_control package.
- set_volume(level): Adjusts volume using pycaw.
- close_application(app_name): Closes specified application using psutil.
- listen_for_hotword(): Listens for the hotword "listen" and reactivates assistant.

GUI Class: DevinGUI
-------------------
- Status Label: Displays listening/responding state
- Waveform Label: Animated wave for a visual cue
- Console (QTextEdit): Logs conversation
- Command Input (QLineEdit): Accepts text commands
- Send Button: Sends the command

Setup Instructions
------------------
Prerequisites
- Python 3.7+
- Microphone access
- Internet connection (for speech recognition and Wikipedia)

Installation
pip install -r requirements.txt

Example requirements.txt:
PyQt5
pyttsx3
SpeechRecognition
pycaw
pyautogui
psutil
screen_brightness_control
wikipedia
pyaudio

Running the App
python main.py

Future Enhancements
-------------------
- 🔒 Add authentication or voice recognition per user
- 🌈 Custom themes or voice packs
- 🧠 GPT integration for intelligent conversations
- 💾 Save session logs or chat history
- 📦 Modular plugin system

-----------------------------------------------------------
Created BY- ARNAV PUNDIR

